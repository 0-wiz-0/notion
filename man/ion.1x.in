.TH ION 1
.SH NAME
Ion - an X11 window manager
.SH SYNOPSIS
.B ion
.I "[options]"
.SH "DESCRIPTION"

Ion is a tiling tabbed window manager designed with keyboard users in mind.
 
.SH "OPTIONS"
.TP
.B \-display host:display.screen
X display to manage
.TP
.B \-cfgfile configfile
Config file to use instead of default
.TP
.B \-moduledir dir
Directory to search for module
.TP
.B \-confdir dir
Directory to search for configuration files and other scripts
.TP
.B \-onescreen
On X servers with multiple screens, manage only default screen, not all.
.TP
.B \-help
Show help on command line options
.TP
.B \-version
Show version
.TP
.B \-about
Show about text

.SH KEYS

These are the default keybindings.
.B Mod1
depends on your system. On PC:s with XFree86 it is probably bound to the left
alt key (\fBAlt_L\fP).
On Suns it is usually bound to the diamond keys (\fBMeta_L\fP, \fBMeta_R\fP). Use
\fIxmodmap(1x)\fP to find out.

.SS F-keys

.TP
.B F1
Show manual page (query, uses ion-man). Tab-completion can be enabled by
specifying a list of directories in the variable query_man_path.
.TP
.B Mod1+F1
Show Ion manual page.
.TP
.B F2
Run an xterm.
.TP
.B F3
Run a program (query). Precede the program name with a colon (:) to run in xterm (ion-runinxterm).
.TP
.B Mod1+F3
Call a function (query).
.TP
.B F4
Start new SSH session (query, uses ion-ssh). Tab-completion of hosts can be
enabled by specifying them in the configuration variable query_ssh_hosts.
.TP
.B F5
Open a file for editing (query). Uses ion-edit which by default uses run-mailcap.
.TP
.B F6
Open a file for viewing (query). Uses ion-view which by default uses run-mailcap.
.TP
.B F9
Go to existing workspace or create new (query).
.TP
.B F11
Restart Ion (query)
.TP
.B F12
Exit Ion (query)

.SS Navigation

.TP
.B Mod1+n
Go to n:th workspace (n=1..9, 0)
.TP
.B Mod1+Right
Go to next workspace
.TP
.B Mod1+Left
Go to previous workspace
.TP
.B Mod1+Shift+n
Go to n:th screen (n=1,2)
.TP
.B Mod1+Shift+Right
Go to next screen
.TP
.B Mod1+Shift+Left
Go to previous screen
.TP
.B Mod1+G
Go to client (query; only works in a frame)
.TP
.B Mod1+K K
Go to previously active object



.IP "\fINavigation on tiled workspaces\fR"

.TP
.B Mod1+N
Go to below frame
.TP
.B Mod1+P
Go to above frame
.TP
.B Mod1+Tab
Go to right frame
.TP
.B Mod1+K Tab
Go to left frame

.IP "\fINavigation on floating workspaces\fR"

.TP
.B Mod1+Tab
Circulate
.TP
.B Mod1+K Tab
Backcirculate

.SS Closing and destroying objects.

.TP
.B Mod1+C
Close active object if possible
.TP
.B Mod1+K C
Kill client window
.TP
.B Mod1+K X
Destroy frame

.SS Frame operations

.TP
.B Mod1+K N
Go to next client window within frame
.TP
.B Mod1+K P
Go to previous client window within frame
.TP
.B Mod1+K n
Go to n:th client window within frame (n=1..9, 0)
.TP
.B Mod1+A
Attach client in current frame (query)

.IP "\fIResizing and splitting\fR"

.TP
.B Mod1+K V
Maximize vertically
.TP
.B Mod1+K H
Maximize horizontally
.TP
.B Mod1+S
Split vertically (tiled workspaces only)
.TP
.B Mod1+K S
Split horizontally (tiled workspaces only)
.TP
.B Mod1+R
Enter resize mode

.IP "\fIResize mode bindings\fR"

.TP
.B Left, Right, Up Down or F, B, P, N
Grow the frame in the specific direction
.TP
.B Shift+Left, Right, Up Down or Shift+F, B, P, N
Shrink the frame in the specific direction
.TP
.B Mod1+Left, Right, Up Down or Mod1+F, B, P, N
On floating frame worskacpes: move the frame in the specific direction.

.SS Miscellaneous
.TP
.B Mod1+L
Broken application resize kludge; try to make that broken application
that didn't get it the first time to understand the real size of the
active window
.TP
.B Mod1+Q
Send next key press to active client window.


.SH LINE-EDITING KEYS

These keys can be used in the line editor (queries). They are similar to
those of \fIjoe(1)\fP.
Selection works differently, though, while the keys are equivalent.

.SS Movement

.TP
.B Control+F, Right arrow
Go forward character
.TP
.B Control+B, Left arrow
Go backward character
.TP
.B Control+E, End
Go to end of line
.TP
.B Control+A, Home
Go to beginning of line
.TP
.B Control+Z
Backward skip word
.TP
.B Control+X
Forward skip word

.SS Delete

.TP
.B Control+D, Delete
Delete next character
.TP
.B Control+H, Backspace
Delete previous character
.TP
.B Control+J
Delete to end of line
.TP
.B Control+Y
Delete whole line
.TP
.B Control+W
Delete word
.TP
.B Control+O
Backward delete word

.SS Selections

.TP
.B Control+K B
Set mark (begin selection)
.TP
.B Control+K K
Copy selection
.TP
.B Control+K Y
Cut selection
.TP
.B Control+K C
Paste

.SS Completion and history

.TP
.B Tab
Complete or list possible completions (if available)
.TP
.B Control+U, Page up
Scroll completions up
.TP
.B Control+V, Page down
Scroll completions down
.TP
.B Control+P, Up arrow
Previous history entry
.TP
.B Control+N, Down arrow
Next history entry

.SS Cancel, accept

.TP
.B Control+C, Escape
Cancel
.TP
.B Control+M, Enter
Accept

.SH BUTTONS

The bindings for the two types of frames are again different because not
all legacy/floating frame actions are available on tiled frames and thus
those buttons have been mapped to other actions.

.SS Tiled frames

.TP
.B Button1 (left) or Button2 (middle) on tab
Click: switch client, drag: drag&drop clients between frames
.TP
.B Button1 (left) on border
Drag: resize
.TP
.B Mod1+Button1 (left) or Mod1+Button3 (right)
Resize.

.SS Floating frames

.TP
.B Button1 (left)
Press: raise frame, click tab: switch client, double-click tab: toggle
shade mode, drag border: resize, drag elsewhere: move frame
.TP
.B Button2 (middle) ontab
Click: switch client, drag: drag&drop clients between frames
.TP
.B Mod1+Button1 (left)
Click: raise, drag: move
.TP
.B Mod1+Button3 (right)
Click: lower: drag: resize

.SH FILES AND DIRECTORIES
.TP
.B ETCDIR/
System default configuration files
.TP
.B ETCDIR/ioncore.lua
System default main configuratio files
.TP
.B ETCDIR/look-*.lua
Color scheme configuration files
.TP
.B ~/.ion-devel/
User configuration files
.TP
.B ~/.ion-devel/ioncore.lua
User default configuration file (overrides system default)

.SH SEE ALSO
The Ion home page, \fIhttp://iki.fi/tuomov/ion/\fP
.PP
The document "Ion: Configuring and extending with Lua" found on the
Ion home page.
.PP
.I DOCDIR/
.PP
.I X(1x)
.SH AUTHOR
Ion was written by Tuomo Valkonen <tuomov at iki.fi>.
